from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message

from tgbot.keyboards.inline import play_kb, wallet_kb, referral_kb, help_kb
from tgbot.keyboards.main_menu import main_menu_kb


async def user_start(message: Message):
    # —Ç—É—Ç –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
    if message.text[7:]:
        # add_ref_user(message, message.text[7:]) —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Å–º–æ—Ç—Ä–∏ –≤ –ø—Ä–∞–Ω–∫–±–æ—Ç–µ
        pass
    await message.answer_animation(animation="CgACAgIAAxkBAAEBvb1kIHeXlluLI7wGSa8qUPGJndrHRQACJS0AAkJbyUhgfTtFSyXqfC8E",
                                   caption="<b>üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–£–ë!</b>", reply_markup=main_menu_kb,
                                   parse_mode="HTML")


async def finish_state(message: Message, state: FSMContext):
    state_name = await state.get_state()
    await state.finish()
    await message.answer(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ {state_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


async def user_play(message: Message, state: FSMContext):
    await state.finish()
    await message.answer_animation(animation="CgACAgIAAxkBAAEBvb1kIHeXlluLI7wGSa8qUPGJndrHRQACJS0AAkJbyUhgfTtFSyXqfC8E",
                                   reply_markup=play_kb)


async def user_wallet(message: Message, state: FSMContext):
    await state.finish()
    await message.answer_animation(animation="CgACAgIAAxkBAAEBvb1kIHeXlluLI7wGSa8qUPGJndrHRQACJS0AAkJbyUhgfTtFSyXqfC8E",
                                   caption="üí∞ <b>–ö–æ—à–µ–ª—ë–∫</b>\n\n‚Äî –ë–∞–ª–∞–Ω—Å: <b>0.0 ‚ÇΩ</b>",
                                   reply_markup=wallet_kb)


async def user_profile(message: Message, state: FSMContext):
    await state.finish()
    await message.answer_animation(animation="CgACAgIAAxkBAAEBvb1kIHeXlluLI7wGSa8qUPGJndrHRQACJS0AAkJbyUhgfTtFSyXqfC8E",
                                   caption=f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
                                           f"<b>üÜî ID:</b>\n<code>{message.from_user.id}</code>\n"
                                           f"<b>üë§ Username:</b>\n<code>{message.from_user.username}</code>\n"
                                           f"<b>‚è± –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n–ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ë–î",
                                   reply_markup=referral_kb)


async def user_help(message: Message, state: FSMContext):
    await state.finish()
    await message.answer_animation(animation="CgACAgIAAxkBAAEBvb1kIHeXlluLI7wGSa8qUPGJndrHRQACJS0AAkJbyUhgfTtFSyXqfC8E",
                                   reply_markup=help_kb)


def register_user(dp: Dispatcher):
    dp.register_message_handler(user_start, commands=["start"], state="*")
    dp.register_message_handler(finish_state, commands=["finish"], state="*")
    dp.register_message_handler(user_play, lambda message: message.text == "üé≤ –ò–≥—Ä–∞—Ç—å")
    dp.register_message_handler(user_wallet, lambda message: message.text == "üí∞ –ö–æ—à–µ–ª—ë–∫")
    dp.register_message_handler(user_profile, lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    dp.register_message_handler(user_help, lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
